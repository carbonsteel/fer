. realm (  # root is first definition
    realm-domain-import*@imports
    realm-domain-declaration*@domains
    w) # allow whitespace after file content

. ws [ \n]
. pseudo-letter [a-zA-Z_']
. dot '..'
. domain-literal-full 'domain'
. domain-literal-min 'd'
. from 'from'
. import-literal-full 'import'
. import-literal-min 'i'
. as 'as'
. left-curly-bracket '{'
. right-curly-bracket '}'
. left-square-bracket '['
. right-square-bracket ']'
. vertical-line '|'
. colon ':'
. double-colon '::'
. greater-than-sign '>'
. equals-sign '='
. dollar-sign '$'
. ampersand '&'
. left-parenthesis '('
. right-parenthesis ')'
. tilde '~'
. solidus '/'
. percent-sign '%' # alala
. octothorp '#'
. line-feed '\n'
. line-comment-content [^\n]
. left-to-right-arrow '->'

. domain { domain-literal-full domain-literal-min }
. import { import-literal-full import-literal-min }

. ww (ws* line-comment?)
. w (ww*)
. line-comment (octothorp line-comment-content* line-feed?)

. _id (pseudo-letter+@@)
. id (w _id@@)
. variable-prefix (w dot)
. realm-path (w dot?@local realm-path-branch+@path) : on_realm_path
. realm-path-branch ( solidus id@realm )

. realm-domain-import (
    w from 
    realm-path@realm
    w left-curly-bracket
    import-domain-w+@domains
    w right-curly-bracket
  ) : on_realm_domain_import
. import-domain (import id@domain import-domain-as?@as_domain)
. import-domain-w (w import-domain@@)
. import-domain-as (w as id@@)

. domain-declaration (domain-declaration-id@id codomain?@ domain-definition?@domain)
. realm-domain-declaration (w domain w domain-declaration@@)
. domain-declaration-id (_id@@) : on_domain_declaration_id
. domain-definition (
    w left-curly-bracket
    # domain-parser?@parser
    # w alts?@
    variable-declaration*@variables
    inner-domain-declaration*@domains
    transform-definition*@transforms
    w right-curly-bracket
  )
#. domain-parser (w percent-sign __grammar@@)
. inner-domain-declaration (w vertical-line w domain-declaration@@)

. expression ( 
    w ampersand?@domainof id@ expression-arguments?@arguments expression-lookup?@lookup
  )
. expression-argument (
    variable-prefix id@ w tilde expression@
  )
. expression-arguments (
    w left-parenthesis
    expression-argument*@@
    w right-parenthesis
  )
. expression-lookup (w solidus expression@@)
. codomain (w left-to-right-arrow w expression@@)

. variable-definition { variable-constant variable-bound }
. variable-declaration (variable-prefix w variable-definition@@)
. variable-constraints-argument (variable-prefix expression@@)
. variable-constraints (w double-colon w left-square-bracket variable-constraints-argument+@constraints right-square-bracket)
. variable-domain (w colon expression@@)
. variable-bound (_id@id variable-domain?@ variable-constraints?@)
. variable-constant (_id@id w tilde expression@)

. transform-compare (variable-prefix id@ w equals-sign id@)
. transform-definition (
    w greater-than-sign transform-compare*@compares
    w dollar-sign expression-argument*@locals expression@
  )

# asd 
# asdasd