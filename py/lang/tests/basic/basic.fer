from /Prelude {
  import Natural
  i NaturalMath
  i List
}

domain Animal {
  | getLegCount -> Natural {}
}

d Monopod {
  | getLegCount -> Naturaly {
    . Naturaly ~ Natural
    >$ One
  }
}



#d DomainMath {
#  | implements {
#    . interface:Domain
#  }
#}

d Zoologist {
  | countLegs -> Natural {
    . animal:Animal
    >$ animal/getLegCount()
  }
}

d Fmap {
  .a .b
  | List' -> List(~b) {
    .l : List(~a)
    .f : \\ -> b {.x : a}
    > .l = Empty $ Empty
    > .l = Node $ Node(~Fmap!/List'(~l/next) 
                       ~f(~l/value))
  }
}

d Main {
  # 1. that's a string literal
  >$ "my str\i\ng\\\'asda@ \""

  # 2. that's an integer literal
  >$ 12341

  # 3. that's a floating point number literal
  >$ -12222.0

  # 4. named style arguments
  >$ NaturalMath/sum(.a~Next(.b~Oneee) .b~Next(.n~One))

  # 5. ordered style arguments
  # 6. bang! asks to infer arguments
  >$ Fmap!/List(~List!/Node(~List!/Empty ~1)
  # 7. that's lambda 
                ~\\ -> Natural {.a >$ NaturalMath/sum(~a ~1)})
}



d Abc {
  | a | b | c
}

d getAa -> Abc {
  >$ a
}

